function(add_mpi_test name file no_mpi_proc)
  message(STATUS "Adding mpi test " ${name})
  add_executable(${name} ${file})
  if(${CMAKE_VERSION} VERSION_GREATER "3.8.2")
    #target_compile_features(${name} PUBLIC cxx_std_11)
  endif()
  target_include_directories(${name} PUBLIC ${test_header_dir})
  if("${HOST}" STREQUAL "q.ccni.rpi.edu")
    set_target_properties(${name} PROPERTIES LINK_SEARCH_START_STATIC 1)
    set_target_properties(${name} PROPERTIES LINK_SEARCH_END_STATIC 1)
  endif()
  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    get_target_property(FLGS ${name} LINK_FLAGS_DEBUG)
    if(FLGS STREQUAL "FLGS-NOTFOUND")
      SET(FLGS "") # set to empty string
    endif()
    SET(FLGS "${FLGS} ${GCC_COVERAGE_LINK_FLAGS}" )
    set_target_properties(${name} PROPERTIES LINK_FLAGS_DEBUG ${FLGS} )
  endif()
  set(test_parameters -np ${no_mpi_proc} ${CMAKE_CURRENT_BINARY_DIR}/${name} ${ARGN})
  add_test(NAME ${name} COMMAND "mpirun" ${test_parameters} )
endfunction(add_mpi_test)

function(simple_test name file)
  message(STATUS "Adding test " ${name})
  add_executable(${name} ${file})
  if(${CMAKE_VERSION} VERSION_GREATER "3.8.2")
    #target_compile_features(${name} PUBLIC cxx_std_11)
  endif()
  if("${HOST}" STREQUAL "q.ccni.rpi.edu")
    set_target_properties(${name} PROPERTIES LINK_SEARCH_START_STATIC 1)
    set_target_properties(${name} PROPERTIES LINK_SEARCH_END_STATIC 1)
  endif()
  add_test(NAME "${name}_test" COMMAND ${name})
endfunction(simple_test)

if(WITH_CUDA)
  message(STATUS "Adding CUDA test cases:")
  simple_test(cusparse cusparse.cc)
  target_link_libraries(cusparse las)
  target_include_directories(cusparse PUBLIC ${CUDA_INCLUDE_DIRS})
endif()


# MPI TESTS
if (${WITH_MPI})
  add_mpi_test(sparse sparse.cc 1)
  target_link_libraries(sparse las)
  
  add_mpi_test(dense dense.cc 1)
  target_link_libraries(dense las)
  
  add_mpi_test(small_mtx test_small.cc 1)
  target_link_libraries(small_mtx las)
  file(COPY small.mtx small_symm_matrix.mtx DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
  
  
  add_mpi_test(test_solve_sparskit test_solve.cc 1)
  target_link_libraries(test_solve_sparskit las)
  target_compile_definitions(test_solve_sparskit PUBLIC -DBACKEND=sparskit -DUSING_SPARSKIT)
  
  
  if (${WITH_PETSC})
    find_package(PETSc REQUIRED)
    add_mpi_test(test_solve_petsc test_solve.cc 1)
    target_link_libraries(test_solve_petsc las)
    target_compile_definitions(test_solve_petsc PUBLIC -DBACKEND=petsc -DUSING_PETSC)
  endif()
  if (${WITH_PUMI})
    find_package(SCOREC REQUIRED COMPONENTS gmi apf ma)
  endif()
  
  if(${WITH_PETSC} AND ${WITH_PUMI})
    #set(FLAGS "-DTEST_SINGLE")
    add_mpi_test(petsc_raw "petsc_hard.cc;petsc_virt.cc" 8)
    target_link_libraries(petsc_raw las SCOREC::gmi  SCOREC::apf SCOREC::ma ${PETSC_LIBRARIES})
    target_include_directories(petsc_raw PUBLIC ${PETSC_INCLUDE_DIRS} ${SCOREC_INCLUDE_DIRS})
    set_target_properties(petsc_raw PROPERTIES COMPILE_FLAGS "-DTEST_RAW ${FLAGS}")
    add_mpi_test(petsc_lasops "petsc_hard.cc;petsc_virt.cc" 8)
    target_link_libraries(petsc_lasops las SCOREC::gmi  SCOREC::apf SCOREC::ma ${PETSC_LIBRARIES})
    target_include_directories(petsc_lasops PUBLIC ${PETSC_INCLUDE_DIRS} ${SCOREC_INCLUDE_DIRS})
    set_target_properties(petsc_lasops PROPERTIES COMPILE_FLAGS "-DTEST_LASOPS ${FLAGS}")
    add_mpi_test(petsc_call "petsc_hard.cc;petsc_virt.cc" 8)
    target_link_libraries(petsc_call las SCOREC::gmi  SCOREC::apf SCOREC::ma ${PETSC_LIBRARIES})
    target_include_directories(petsc_call PUBLIC ${PETSC_INCLUDE_DIRS} ${SCOREC_INCLUDE_DIRS})
    set_target_properties(petsc_call PROPERTIES COMPILE_FLAGS "-DTEST_CALL ${FLAGS}")
    add_mpi_test(petsc_cvirt "petsc_hard.cc;petsc_virt.cc" 8)
    target_link_libraries(petsc_cvirt las SCOREC::gmi  SCOREC::apf SCOREC::ma ${PETSC_LIBRARIES})
    target_include_directories(petsc_cvirt PUBLIC ${PETSC_INCLUDE_DIRS} ${SCOREC_INCLUDE_DIRS})
    set_target_properties(petsc_cvirt PROPERTIES COMPILE_FLAGS "-DTEST_CVIRT ${FLAGS}")
    add_mpi_test(petsc_virtual "petsc_hard.cc;petsc_virt.cc" 8)
    target_link_libraries(petsc_virtual las SCOREC::gmi  SCOREC::apf SCOREC::ma ${PETSC_LIBRARIES})
    target_include_directories(petsc_virtual PUBLIC ${PETSC_INCLUDE_DIRS} ${SCOREC_INCLUDE_DIRS})
    set_target_properties(petsc_virtual PROPERTIES COMPILE_FLAGS "-DTEST_VIRTUAL ${FLAGS}")
  endif()
endif()
